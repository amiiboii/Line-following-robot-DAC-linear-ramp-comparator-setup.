const byte byteLookupTable[][2] = {
  {0, B00000000},
  {1, B00000001},
  {2, B00000010},
  {3, B00000011},
  {4, B00000100},
  {5, B00000101},
  {6, B00000110},
  {7, B00000111},
  {8, B00001000},
  {9, B00001001},
  {10, B00001010},
  {11, B00001011},
  {12, B00001100},
  {13, B00001101},
  {14, B00001110},
  {15, B00001111},
  {16, B00010000},
  {17, B00010001},
  {18, B00010010},
  {19, B00010011},
  {20, B00010100},
  {21, B00010101},
  {22, B00010110},
  {23, B00010111},
  {24, B00011000},
  {25, B00011001},
  {26, B00011010},
  {27, B00011011},
  {28, B00011100},
  {29, B00011101},
  {30, B00011110},
  {31, B00011111},
  {32, B00100000},
  {33, B00100001},
  {34, B00100010},
  {35, B00100011},
  {36, B00100100},
  {37, B00100101},
  {38, B00100110},
  {39, B00100111},
  {40, B00101000},
  {41, B00101001},
  {42, B00101010},
  {43, B00101011},
  {44, B00101100},
  {45, B00101101},
  {46, B00101110},
  {47, B00101111},
  {48, B00110000},
  {49, B00110001},
  {50, B00110010},
  {51, B00110011},
  {52, B00110100},
  {53, B00110101},
  {54, B00110110},
  {55, B00110111},
  {56, B00111000},
  {57, B00111001},
  {58, B00111010},
  {59, B00111011},
  {60, B00111100},
  {61, B00111101},
  {62, B00111110},
  {63, B00111111},
  {64, B01000000},
  {65, B01000001},
  {66, B01000010},
  {67, B01000011},
  {68, B01000100},
  {69, B01000101},
  {70, B01000110},
  {71, B01000111},
  {72, B01001000},
  {73, B01001001},
  {74, B01001010},
  {75, B01001011},
  {76, B01001100},
  {77, B01001101},
  {78, B01001110},
  {79, B01001111},
  {80, B01010000},
  {81, B01010001},
  {82, B01010010},
  {83, B01010011},
  {84, B01010100},
  {85, B01010101},
  {86, B01010110},
  {87, B01010111},
  {88, B01011000},
  {89, B01011001},
  {90, B01011010},
  {91, B01011011},
  {92, B01011100},
  {93, B01011101},
  {94, B01011110},
  {95, B01011111},
  {96, B01100000},
  {97, B01100001},
  {98, B01100010},
  {99, B01100011},
  {100, B01100100},
  {101, B01100101},
  {102, B01100110},
  {103, B01100111},
  {104, B01101000},
  {105, B01101001},
  {106, B01101010},
  {107, B01101011},
  {108, B01101100},
  {109, B01101101},
  {110, B01101110},
  {111, B01101111},
  {112, B01110000},
  {113, B01110001},
  {114, B01110010},
  {115, B01110011},
  {116, B01110100},
  {117, B01110101},
  {118, B01110110},
  {119, B01110111},
  {120, B01111000},
  {121, B01111001},
  {122, B01111010},
  {123, B01111011},
  {124, B01111100},
  {125, B01111101},
  {126, B01111110},
  {127, B01111111},
  {128, B10000000},
  {129, B10000001},
  {130, B10000010},
  {131, B10000011},
  {132, B10000100},
  {133, B10000101},
  {134, B10000110},
  {135, B10000111},
  {136, B10001000},
  {137, B10001001},
  {138, B10001010},
  {139, B10001011},
  {140, B10001100},
  {141, B10001101},
  {142, B10001110},
  {143, B10001111},
  {144, B10010000},
  {145, B10010001},
  {146, B10010010},
  {147, B10010011},
  {148, B10010100},
  {149, B10010101},
  {150, B10010110},
  {151, B10010111},
  {152, B10011000},
  {153, B10011001},
  {154, B10011010},
  {155, B10011011},
  {156, B10011100},
  {157, B10011101},
  {158, B10011110},
  {159, B10011111},
  {160, B10100000},
  {161, B10100001},
  {162, B10100010},
  {163, B10100011},
  {164, B10100100},
  {165, B10100101},
  {166, B10100110},
  {167, B10100111},
  {168, B10101000},
  {169, B10101001},
  {170, B10101010},
  {171, B10101011},
  {172, B10101100},
  {173, B10101101},
  {174, B10101110},
  {175, B10101111},
  {176, B10110000},
  {177, B10110001},
  {178, B10110010},
  {179, B10110011},
  {180, B10110100},
  {181, B10110101},
  {182, B10110110},
  {183, B10110111},
  {184, B10111000},
  {185, B10111001},
  {186, B10111010},
  {187, B10111011},
  {188, B10111100},
  {189, B10111101},
  {190, B10111110},
  {191, B10111111},
  {192, B11000000},
  {193, B11000001},
  {194, B11000010},
  {195, B11000011},
  {196, B11000100},
  {197, B11000101},
  {198, B11000110},
  {199, B11000111},
  {200, B11001000},
  {201, B11001001},
  {202, B11001010},
  {203, B11001011},
  {204, B11001100},
  {205, B11001101},
  {206, B11001110},
  {207, B11001111},
  {208, B11010000},
  {209, B11010001},
  {210, B11010010},
  {211, B11010011},
  {212, B11010100},
  {213, B11010101},
  {214, B11010110},
  {215, B11010111},
  {216, B11011000},
  {217, B11011001},
  {218, B11011010},
  {219, B11011011},
  {220, B11011100},
  {221, B11011101},
  {222, B11011110},
  {223, B11011111},
  {224, B11100000},
  {225, B11100001},
  {226, B11100010},
  {227, B11100011},
  {228, B11100100},
  {229, B11100101},
  {230, B11100110},
  {231, B11100111},
  {232, B11101000},
  {233, B11101001},
  {234, B11101010},
  {235, B11101011},
  {236, B11101100},
  {237, B11101101},
  {238, B11101110},
  {239, B11101111},
  {240, B11110000},
  {241, B11110001},
  {242, B11110010},
  {243, B11110011},
  {244, B11110100},
  {245, B11110101},
  {246, B11110110},
  {247, B11110111},
  {248, B11111000},
  {249, B11111001},
  {250, B11111010},
  {251, B11111011},
  {252, B11111100},
  {253, B11111101},
  {254, B11111110},
  {255, B11111111}
};


// Pin definitions for DAC1 and DAC2
const int dacPins1[] = {2, 3, 4, 5, 6, 7, 8, 9};
const int dacPins2[] = {10, 11, A0, A1, A2, A3, A4, A5};
const int numPins = sizeof(dacPins1) / sizeof(dacPins1[0]);

void setup() {
  // Initialize DAC pins for DAC1 and DAC2 as outputs
  for (int i = 0; i < numPins; i++) {
    pinMode(dacPins1[i], OUTPUT);
    pinMode(dacPins2[i], OUTPUT);
  }
  Serial.begin(9600);

  pinMode(A6, INPUT_PULLUP);
  pinMode(A7, INPUT_PULLUP);

  
}


void loop() {

    // Continuously read sensor values from A6 and A7
  int sensorValueA6 = analogRead(A6);
  int sensorValueA7 = analogRead(A7);
  
//   Print sensor readings to the serial monitor
  Serial.print(sensorValueA6);
  Serial.print(",");
  Serial.println(sensorValueA7);
  delay (15);
  
  if (Serial.available() >= 4) {
    byte byte10_1 = Serial.parseInt(); // Read an integer value for DAC1
    byte byte10_2 = Serial.parseInt(); // Read an integer value for DAC2

    byte byte2_1 = 0; // Default value for DAC1
    byte byte2_2 = 0; // Default value for DAC2

    for (int i = 0; i < sizeof(byteLookupTable) / sizeof(byteLookupTable[0]); i++) {
      if (byteLookupTable[i][0] == byte10_1) {
        byte2_1 = byteLookupTable[i][1];
      }
      if (byteLookupTable[i][0] == byte10_2) {
        byte2_2 = byteLookupTable[i][1];
      }
    }

    // Set the pins high based on the byte 2 value for DAC1
    for (int i = 0; i < numPins; i++) {
      if (bitRead(byte2_1, i)) {
        digitalWrite(dacPins1[i], HIGH);
      } else {
        digitalWrite(dacPins1[i], LOW);
      }
    }

    // Set the pins high based on the byte 2 value for DAC2
    for (int i = 0; i < numPins; i++) {
      if (bitRead(byte2_2, i)) {
        digitalWrite(dacPins2[i], HIGH);
      } else {
        digitalWrite(dacPins2[i], LOW);
      }
    }
  } 



    // Provide feedback in the serial monitor
//    Serial.print("DAC1 - Byte 10: ");
//    Serial.print(byte10_1);
//    Serial.print(" | Byte 2: ");
//    Serial.println(byte2_1);
//    Serial.print("DAC2 - Byte 10: ");
//    Serial.print(byte10_2);
//    Serial.print(" | Byte 2: ");
//    Serial.println(byte2_2);

    
  
}
